services:
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../modular_monolith/static:/app/static:ro
      - ../modular_monolith/media/:/app/media:ro
      - ./nginx/conf.d/:/etc/nginx/conf.d/:ro
    ports:
      - "80:80"
    depends_on:
      - django

  django:
    build:
      context: ..
      dockerfile: docker/django/Dockerfile
    container_name: modular_monolith
    volumes:
      - ../modular_monolith/static/:/app/static:rw
      - ../modular_monolith/media/:/app/media:rw
    command: >
      sh -c "python manage.py collectstatic --noinput &&
      gunicorn --bind 0.0.0.0:8000 core.presentation.electro.wsgi:application"
    env_file:
      - .env
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:16
    container_name: postgres_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"

  redis:
    image: redis:7
    container_name: redis_storage
    ports:
      - "6379:6379"

  celery:
    build:
      context: ..
      dockerfile: docker/django/Dockerfile
    container_name: celery_worker
    command: celery -A core.utils.infrastructure.celery worker --loglevel=info
    volumes:
      - ../modular_monolith:/app
    depends_on: 
      - redis
      - postgres

volumes:
  postgres_data:

